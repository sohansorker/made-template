// Define the transformation to convert Celsius to Fahrenheit
transform TempConvert {
    from celsius oftype decimal;
    to fahrenheit oftype decimal;
    fahrenheit: (celsius * 9/5) + 32;
}

pipeline TemperaturePipeline {

    // Step 1: Extract the data from the URL
    block TemperatureExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Step 2: Unzip the downloaded file
    block TemperatureArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Step 3: Select the "data.csv" file from the extracted archive
    block TemperatureFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    // Step 4: Parse the CSV file
    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // Step 5: Select the relevant columns from the CSV file (A to J)
    block ColDataSelector oftype CellRangeSelector {
        select: range A1:J*;
    }

    // Step 6: Rename columns to English
    block ColumnRenamer oftype CellWriter {
        at: range A1:J1;
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    // Step 7: Apply temperature conversion transformation to the 'temperature' column
    block TemperatureTableTransformer oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        use: TempConvert;  // Apply TempConvert transformation to 'temperature'
    }

    // Step 8: Apply temperature conversion transformation to the 'battery_temperature' column
    block BatteryTemperatureTableTransformer oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        use: TempConvert;  // Apply TempConvert transformation to 'battery_temperature'
    }

    // Step 9: Write the transformed data into an SQLite database
    block TemperatureSQLiteLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "temperatures.sqlite";
    }

    // Step 10: Validate data (ensure id > 0)
    block IDValidator oftype RowValidator {
        condition: "id > 0";
    }

    // Step 11: Pipeline execution flow
    TemperatureExtractor
        -> TemperatureArchiveInterpreter
        -> TemperatureFilePicker
        -> TemperatureCSVInterpreter
        -> ColDataSelector
        -> ColumnRenamer
        -> TemperatureTableTransformer
        -> BatteryTemperatureTableTransformer
        -> IDValidator
        -> TemperatureSQLiteLoader;
}
