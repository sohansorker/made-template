// Transform data: syntax: https://jvalue.github.io/jayvee/docs/user/transforms
transform TempConvert
{
  from celsius oftype decimal;
  to fahrenheit oftype decimal;

  fahrenheit: (celsius * 9/5) + 32;
}

pipeline TemperaturePipeline {

    // Download and unzip data
    block TemperatureExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Unzipping Data
    block TemperatureArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Use the “data.csv” in the zip file 
    block TemperatureFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TemperatureFileInterpreter oftype TextFileInterpreter {}

    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // Select only the relevant columns and reshape data
    block ColDataSelector oftype CellRangeSelector { 
        select: range A1:F*;  // Select only the relevant columns: "Geraet", "Hersteller", "Model", "Monat", "Temperatur in °C (DWD)", "Batterietemperatur in °C"
    }

    // Write the columns with proper English names
    block TemperaturesCellWriter1 oftype CellWriter {
        at: range A1:F1;  // Write headers to the first row
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    // Reshape data and assign column types
    block TemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype BIGINT, 
            "producer" oftype TEXT, 
            "model" oftype TEXT, 
            "month" oftype INTEGER, 
            "temperature" oftype FLOAT, 
            "battery_temperature" oftype FLOAT
        ];
    }

    // Convert temperatures from Celsius to Fahrenheit
    block TemperatureTableTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: TempConvert;
    }

    block BatterieTemperatureTableTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: TempConvert;
    }

    // Validate data: ensure id > 0
    block IDValidator oftype RowValidator {
        condition: "id > 0";
    }

    // Write data into a SQLite database called “temperatures.sqlite”, in the table “temperatures”
    block TemperatureSQLiteLoader oftype SQLiteLoader {
        table: 'temperatures';
        file: 'temperatures.sqlite';
    }

    // Define the pipeline flow
    TemperatureExtractor
        -> TemperatureArchiveInterpreter
        -> TemperatureFilePicker
        -> TemperatureFileInterpreter
        -> TemperatureCSVInterpreter
        -> ColDataSelector
        -> TemperaturesCellWriter1
        -> TemperatureTableInterpreter
        -> TemperatureTableTransformer
        -> BatterieTemperatureTableTransformer
        -> IDValidator
        -> TemperatureSQLiteLoader;

}
