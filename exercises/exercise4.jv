// reusable constraint 
constraint GreaterThanZero on integer:
    value > 0;

// reusable constraint for month range (1 to 12)
constraint ValidMonthRange on integer:
    value >= 1 and value <= 12;

//  reusable valuetypes applying the constraints
valuetype IdType oftype integer {
    constraints: [GreaterThanZero]; 
}

valuetype MonthType oftype integer {
    constraints: [ValidMonthRange]; 
}

// Transform Function: Celsius to Fahrenheit conversion
transform TempConvert
{
  from celsius oftype decimal;
  to fahrenheit oftype decimal;

  fahrenheit: (celsius * 9/5) + 32;
}

pipeline TemperaturePipeline {

    //  Download the ZIP file
    block TemperatureExtractor oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Unzip the data
    block TemperatureArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    //  Pick the CSV file ("data.csv") from the unzipped contents
    block TemperatureFilePicker oftype FilePicker {
        path: "/data.csv";
    }

    block TemperatureFileInterpreter oftype TextFileInterpreter{}
    block TemperatureCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

       // “Batterietemperatur in °C” to “battery_temperature”
    block TemperaturesCellWriter oftype CellWriter { 
        at:cell J1; 
        write:["battery_temperature"];
        }

    //  Rename columns from German to English
    block ColumnRenamer oftype CellWriter {
        at: range A1:E1;
    }

    //  Interpret the data into a table format with correct types
    block TemperatureTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype IdType,             
            "producer" oftype text,
            "model" oftype text,
            "month" oftype MonthType,        
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // Transform the temperature column (Celsius to Fahrenheit)
    block TemperatureTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        uses: TempConvert;
    }

    // Transform the battery_temperature column (Celsius to Fahrenheit)
    block BatteryTemperatureTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: TempConvert;
    }

    // Load the data into a SQLite database
    block TemperatureSQLiteLoader oftype SQLiteLoader {
        table: 'temperatures';
        file: 'temperatures.sqlite';
    }

    // Connect the blocks in the pipeline
    TemperatureExtractor
        -> TemperatureArchiveInterpreter
        -> TemperatureFilePicker
        -> TemperatureFileInterpreter
        -> TemperatureCSVInterpreter
        -> TemperaturesCellWriter
        -> ColumnRenamer
        -> TemperatureTableInterpreter
        -> TemperatureTransformer
        -> BatteryTemperatureTransformer
        -> TemperatureSQLiteLoader;
}
