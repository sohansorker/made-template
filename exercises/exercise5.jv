// Constraint for ZoneID, ensuring only a specific range is allowed
constraint ZoneIDRangeValidator oftype RangeConstraint { lowerBound: 1925; upperBound: 1925; }
valuetype ZoneID oftype integer { constraints: [ ZoneIDRangeValidator ]; }

// validating a specific range for coordinates
constraint GeoCoordinateValidator oftype RangeConstraint { lowerBound: -90; upperBound: 90; }
valuetype GeoCoordinates oftype decimal { constraints: [ GeoCoordinateValidator ]; }

// Constraint to ensure stop names contain valid German characters
constraint StopNameValidationRegex oftype RegexConstraint { regex: /[a-zA-ZäöüÄÖÜß]+/; }
valuetype StopName oftype text { constraints: [ StopNameValidationRegex ]; }

pipeline GTFSProcessingPipeline {

    // Define the sequential blocks to process GTFS data
    GTFSFileDownloader
        -> GTFSArchiveExtractor
        -> GTFSStopsFileSelector
        -> GTFSFileTextInterpreter
        -> GTFSCSVDataParser
        -> GTFSDataMapper
        -> GTFSDatabaseLoader;

    // Extract GTFS zip file from a specified remote URL
    block GTFSFileDownloader oftype HttpExtractor { url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip"; }

    // Unpack the downloaded zip file to access its contents
    block GTFSArchiveExtractor oftype ArchiveInterpreter { archiveType: "zip"; }

    // Select the specific file, "stops.txt," from the unpacked directory
    block GTFSStopsFileSelector oftype FilePicker { path: "/stops.txt"; }

    // Convert the selected file from binary to a UTF-8 encoded text file
    block GTFSFileTextInterpreter oftype TextFileInterpreter { encoding: "utf8"; }

    // Parse the text file into a structured CSV format with defined delimiters
    block GTFSCSVDataParser oftype CSVInterpreter {
        delimiter: ",";
        enclosing: '"';
    }

    // Map the CSV data to a structured table while validating and selecting specific columns
    block GTFSDataMapper oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeoCoordinates,
            "stop_lon" oftype GeoCoordinates,
            "zone_id" oftype ZoneID
        ];
    }

    // Load the processed table data into an SQLite database
    block GTFSDatabaseLoader oftype SQLiteLoader {
        table: "stops";
        file: "./gtfs.sqlite";
    }
}
