pipeline GoodsPipeline {

    GoodsExtractor
        -> GoodsTextFileInterpreter
        -> GoodsCSVInterpreter
        -> GoodsRowRemover
        -> GoodsRangeSelector
        -> TransportedGoodsHeaderAdder
        -> QuantityNameHeaderAdder
        -> GoodsTableProcessor
        -> TransformMonthToUppercase
        -> TransformFebruaryToUppercase
        -> GoodsDatabaseLoader;

    // Extract data from the provided URL
    block GoodsExtractor oftype HttpExtractor {
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    // Interpret the file as text with specified encoding
    block GoodsTextFileInterpreter oftype TextFileInterpreter {
        encoding: "latin3";
    }

    // Interpret the text as a CSV file with a specific delimiter
    block GoodsCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // Remove unnecessary rows from the dataset
    block GoodsRowRemover oftype RowDeleter {
        delete: [row 1, row 2, row 3, row 4, row 5, row 6, row 7, row 41338, row 41339];
    }

    // Select the desired range of cells for further processing
    block GoodsRangeSelector oftype CellRangeSelector {
        select: range A1:AU*;
    }

    // Add headers for the transported goods data
    block TransportedGoodsHeaderAdder oftype CellWriter {
        at: range A1:E1;
        write: ["year", "month", "goods_id", "goods_name", "goods_source"];
    }

    // Add headers for the quantity and total columns
    block QuantityNameHeaderAdder oftype CellWriter {
        at: range AT1:AU1;
        write: ["abroad", "total"];
    }

    // Interpret the data as a structured table with column validation
    block GoodsTableProcessor oftype TableInterpreter {
        header: true;
        columns: [
            "year" oftype PositiveInteger,
            "month" oftype GermanMonth,
            "goods_id" oftype NST7,
            "goods_name" oftype text,
            "goods_source" oftype text,
            "abroad" oftype PositiveInteger,
            "total" oftype PositiveInteger
        ];
    }

    // Define a value type for positive integers
    valuetype PositiveInteger oftype integer {
        constraints: [ensurePositive];
    }
    constraint ensurePositive on decimal {
        value >= 0;
    }

    // Define a value type for "NST7-" formatted IDs
    valuetype NST7 oftype text {
        constraints: [ensureNST7Format];
    }
    constraint ensureNST7Format oftype RegexConstraint {
        regex: /^NST7-[A-Z0-9]{3}$/;
    }

    // Define a value type for German month names
    valuetype GermanMonth oftype text {
        constraints: [restrictToGermanMonths];
    }
    constraint restrictToGermanMonths oftype AllowlistConstraint {
        allowlist: [
            "Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli",
            "August", "September", "Oktober", "November", "Dezember"
        ];
    }

    // Transform months to uppercase
    transform ConvertMonthToUppercase {
        from originalText oftype text;
        to transformedText oftype text;
        transformedText: originalText replace /Januar/ with "JANUAR";
    }
    block TransformMonthToUppercase oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: ConvertMonthToUppercase;
    }

    // Transform "Februar" to uppercase
    transform ConvertFebruaryToUppercase {
        from originalText oftype text;
        to transformedText oftype text;
        transformedText: originalText replace /Februar/ with "FEBRUAR";
    }
    block TransformFebruaryToUppercase oftype TableTransformer {
        inputColumns: ["month"];
        outputColumn: "month";
        use: ConvertFebruaryToUppercase;
    }

    // Load the cleaned and transformed data into a SQLite database
    block GoodsDatabaseLoader oftype SQLiteLoader {
        table: "goods";
        file: "goodsTransportedByTrain.sqlite";
    }
}
